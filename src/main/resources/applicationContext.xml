<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
				http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName" default-lazy-init="true">

	<!-- 扫描com.miles.xiuda.dao,com.miles.xiuda.service,com.miles.xiuda.util下的注解 -->
	<context:component-scan base-package="com.miles.xiuda.dao,com.miles.xiuda.service,com.miles.xiuda.util">
	</context:component-scan>

	<!-- 加载的properties属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8"></property>
		<property name="ignoreUnresolvablePlaceholders" value="true"></property>
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="filters" value="${jdbc.filters}" />
		<!-- 初始化连接数 -->
		<property name="initialSize" value="${pool.initialSize}" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="${pool.minIdle}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${pool.maxActive}" />
		<!-- 获取连接等待超时，单位毫秒 -->
		<property name="maxWait" value="${pool.maxWait}" />
		<!-- 配置检测连接的间隔时间，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
		<!-- 配置连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性 -->
		<property name="testWhileIdle" value="${pool.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效 -->
		<property name="testOnBorrow" value="${pool.testOnBorrow}" />
		<property name="testOnReturn" value="${pool.testOnReturn}" />
		<!-- 是否缓存preparedStatement -->
		<property name="poolPreparedStatements" value="${pool.poolPreparedStatements}" />
		<!-- 指定PSCache的大小 -->
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${pool.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="${pool.validationQuery}" />
	</bean>

	<!-- 构建sqlSessionFactory -->
	<bean id="mybatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/miles/xiuda/dao/mapper/*.xml" />
	</bean>

	<!-- 扫描数据访问接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.miles.xiuda.dao" />
		<property name="sqlSessionFactoryBeanName" value="mybatisSqlSessionFactory"></property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 开启注解式事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 配置事务管理器属性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务切入 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.miles.xiuda.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 切面注解 -->
	<aop:aspectj-autoproxy />

	<!-- 异常处理 -->
<!-- 	<bean id="rTExceptionHandler" class="com.miles.xiuda.handler.RTExceptionHandler" /> -->

	<!-- Kaptcha验证码生成器 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
	    <property name="config">
	        <bean class="com.google.code.kaptcha.util.Config">
	            <constructor-arg>
	                <props>
	                    <prop key="kaptcha.border">no</prop>
	                    <prop key="kaptcha.textproducer.font.color">black</prop>
	                    <prop key="kaptcha.textproducer.char.space">5</prop>
	                </props>
	            </constructor-arg>
	        </bean>
	    </property>
	</bean>
	<!-- Shiro配置 -->
<!-- 	<import resource="applicationContext-shiro.xml" /> -->
</beans>